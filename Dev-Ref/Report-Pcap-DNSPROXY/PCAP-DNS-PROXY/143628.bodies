class ConfigurationTable
!!!134540.cpp!!!	ConfigurationTable(in  : void)
	memset(this, 0, sizeof(CONFIGURATION_TABLE));
	try {
	//[Listen] block
	#if defined(ENABLE_PCAP)
		PcapDevicesBlacklist = new std::vector<std::string>();
	#endif
		ListenPort = new std::vector<uint16_t>();
		AcceptTypeList = new std::vector<uint16_t>();

	//[Addresses] block
		ListenAddress_IPv6 = new std::vector<sockaddr_storage>();
		ListenAddress_IPv4 = new std::vector<sockaddr_storage>();
		LocalMachineSubnet_IPv6 = new ADDRESS_PREFIX_BLOCK();
		LocalMachineSubnet_IPv4 = new ADDRESS_PREFIX_BLOCK();
		Target_Server_IPv6_Multiple = new std::vector<DNS_SERVER_DATA>();
		Target_Server_IPv4_Multiple = new std::vector<DNS_SERVER_DATA>();

	//[Data] block
	#if defined(ENABLE_PCAP)
		ICMP_PaddingData = new uint8_t[ICMP_PADDING_MAXSIZE]();
		DomainTest_Data = new uint8_t[DOMAIN_MAXSIZE]();
	#endif
		Local_FQDN_String = new std::string();
		Local_FQDN_Response = new uint8_t[DOMAIN_MAXSIZE]();
	#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
		LocalServer_Response = new uint8_t[DOMAIN_MAXSIZE + sizeof(dns_record_ptr) + sizeof(dns_record_opt)]();
	#endif

	//[Proxy] block
		SOCKS_TargetDomain = new std::string();
		SOCKS_Username = new std::string();
		SOCKS_Password = new std::string();
	#if defined(ENABLE_TLS)
		HTTP_CONNECT_TLS_SNI = new std::wstring();
		MBS_HTTP_CONNECT_TLS_SNI = new std::string();
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		HTTP_CONNECT_TLS_AddressString_IPv6 = new std::string();
		HTTP_CONNECT_TLS_AddressString_IPv4 = new std::string();
	#endif
	#endif
		HTTP_CONNECT_TargetDomain = new std::string();
		HTTP_CONNECT_HeaderField = new std::vector<std::string>();
		HTTP_CONNECT_ProxyAuthorization = new std::string();
	}
	catch (std::bad_alloc)
	{
	//[Listen] block
	#if defined(ENABLE_PCAP)
		delete PcapDevicesBlacklist;
		PcapDevicesBlacklist = nullptr;
	#endif
		delete ListenPort;
		delete AcceptTypeList;
		ListenPort = nullptr;
		AcceptTypeList = nullptr;

	//[Addresses] block
		delete ListenAddress_IPv6;
		delete ListenAddress_IPv4;
		delete LocalMachineSubnet_IPv6;
		delete LocalMachineSubnet_IPv4;
		delete Target_Server_IPv6_Multiple;
		delete Target_Server_IPv4_Multiple;
		ListenAddress_IPv6 = nullptr;
		ListenAddress_IPv4 = nullptr;
		LocalMachineSubnet_IPv6 = nullptr;
		LocalMachineSubnet_IPv4 = nullptr;
		Target_Server_IPv6_Multiple = nullptr;
		Target_Server_IPv4_Multiple = nullptr;

	//[Data] block
	#if defined(ENABLE_PCAP)
		delete[] ICMP_PaddingData;
		delete[] DomainTest_Data;
		ICMP_PaddingData = nullptr;
		DomainTest_Data = nullptr;
	#endif
		delete Local_FQDN_String;
		delete[] Local_FQDN_Response;
		Local_FQDN_String = nullptr;
		Local_FQDN_Response = nullptr;
	#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
		delete[] LocalServer_Response;
		LocalServer_Response = nullptr;
	#endif

	//[Proxy] block
		delete SOCKS_TargetDomain;
		delete SOCKS_Username;
		delete SOCKS_Password;
	#if defined(ENABLE_TLS)
		delete HTTP_CONNECT_TLS_SNI;
		delete MBS_HTTP_CONNECT_TLS_SNI;
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		delete HTTP_CONNECT_TLS_AddressString_IPv6;
		delete HTTP_CONNECT_TLS_AddressString_IPv4;
	#endif
	#endif
		delete HTTP_CONNECT_TargetDomain;
		delete HTTP_CONNECT_HeaderField;
		delete HTTP_CONNECT_ProxyAuthorization;
		SOCKS_TargetDomain = nullptr;
		SOCKS_Username = nullptr;
		SOCKS_Password = nullptr;
	#if defined(ENABLE_TLS)
		HTTP_CONNECT_TLS_SNI = nullptr;
		MBS_HTTP_CONNECT_TLS_SNI = nullptr;
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		HTTP_CONNECT_TLS_AddressString_IPv6 = nullptr;
		HTTP_CONNECT_TLS_AddressString_IPv4 = nullptr;
	#endif
	#endif
		HTTP_CONNECT_TargetDomain = nullptr;
		HTTP_CONNECT_HeaderField = nullptr;
		HTTP_CONNECT_ProxyAuthorization = nullptr;

	//Exit process.
		exit(EXIT_FAILURE);
//		return;
	}

//ConfigurationTable settings
	ConfigurationTableSetting(this);
	return;
!!!134668.cpp!!!	ConfigurationTable(in Reference : ConfigurationTable)
//Check itself.
	if (this == &Reference)
		return;

//Class constructor
	memset(this, 0, sizeof(CONFIGURATION_TABLE));
	try {
	//[Listen] block
	#if defined(ENABLE_PCAP)
		PcapDevicesBlacklist = new std::vector<std::string>();
	#endif
		ListenPort = new std::vector<uint16_t>();
		AcceptTypeList = new std::vector<uint16_t>();

	//[Addresses] block
		ListenAddress_IPv6 = new std::vector<sockaddr_storage>();
		ListenAddress_IPv4 = new std::vector<sockaddr_storage>();
		LocalMachineSubnet_IPv6 = new ADDRESS_PREFIX_BLOCK();
		LocalMachineSubnet_IPv4 = new ADDRESS_PREFIX_BLOCK();
		Target_Server_IPv6_Multiple = new std::vector<DNS_SERVER_DATA>();
		Target_Server_IPv4_Multiple = new std::vector<DNS_SERVER_DATA>();

	//[Data] block
	#if defined(ENABLE_PCAP)
		ICMP_PaddingData = new uint8_t[ICMP_PADDING_MAXSIZE]();
		DomainTest_Data = new uint8_t[DOMAIN_MAXSIZE]();
	#endif
		Local_FQDN_String = new std::string();
		Local_FQDN_Response = new uint8_t[DOMAIN_MAXSIZE]();
	#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
		LocalServer_Response = new uint8_t[DOMAIN_MAXSIZE + sizeof(dns_record_ptr) + sizeof(dns_record_opt)]();
	#endif

	//[Proxy] block
		SOCKS_TargetDomain = new std::string();
		SOCKS_Username = new std::string();
		SOCKS_Password = new std::string();
	#if defined(ENABLE_TLS)
		HTTP_CONNECT_TLS_SNI = new std::wstring();
		MBS_HTTP_CONNECT_TLS_SNI = new std::string();
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		HTTP_CONNECT_TLS_AddressString_IPv6 = new std::string();
		HTTP_CONNECT_TLS_AddressString_IPv4 = new std::string();
	#endif
	#endif
		HTTP_CONNECT_TargetDomain = new std::string();
		HTTP_CONNECT_HeaderField = new std::vector<std::string>();
		HTTP_CONNECT_ProxyAuthorization = new std::string();
	}
	catch (std::bad_alloc)
	{
	//[Listen] block
	#if defined(ENABLE_PCAP)
		delete PcapDevicesBlacklist;
		PcapDevicesBlacklist = nullptr;
	#endif
		delete ListenPort;
		delete AcceptTypeList;
		ListenPort = nullptr;
		AcceptTypeList = nullptr;

	//[Addresses] block
		delete ListenAddress_IPv6;
		delete ListenAddress_IPv4;
		delete LocalMachineSubnet_IPv6;
		delete LocalMachineSubnet_IPv4;
		delete Target_Server_IPv6_Multiple;
		delete Target_Server_IPv4_Multiple;
		ListenAddress_IPv6 = nullptr;
		ListenAddress_IPv4 = nullptr;
		LocalMachineSubnet_IPv6 = nullptr;
		LocalMachineSubnet_IPv4 = nullptr;
		Target_Server_IPv6_Multiple = nullptr;
		Target_Server_IPv4_Multiple = nullptr;

	//[Data] block
	#if defined(ENABLE_PCAP)
		delete[] ICMP_PaddingData;
		delete[] DomainTest_Data;
		ICMP_PaddingData = nullptr;
		DomainTest_Data = nullptr;
	#endif
		delete Local_FQDN_String;
		delete[] Local_FQDN_Response;
		Local_FQDN_String = nullptr;
		Local_FQDN_Response = nullptr;
	#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
		delete[] LocalServer_Response;
		LocalServer_Response = nullptr;
	#endif

	//[Proxy] block
		delete SOCKS_TargetDomain;
		delete SOCKS_Username;
		delete SOCKS_Password;
	#if defined(ENABLE_TLS)
		delete HTTP_CONNECT_TLS_SNI;
		delete MBS_HTTP_CONNECT_TLS_SNI;
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		delete HTTP_CONNECT_TLS_AddressString_IPv6;
		delete HTTP_CONNECT_TLS_AddressString_IPv4;
	#endif
	#endif
		delete HTTP_CONNECT_TargetDomain;
		delete HTTP_CONNECT_HeaderField;
		delete HTTP_CONNECT_ProxyAuthorization;
		SOCKS_TargetDomain = nullptr;
		SOCKS_Username = nullptr;
		SOCKS_Password = nullptr;
	#if defined(ENABLE_TLS)
		HTTP_CONNECT_TLS_SNI = nullptr;
		MBS_HTTP_CONNECT_TLS_SNI = nullptr;
	#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
		HTTP_CONNECT_TLS_AddressString_IPv6 = nullptr;
		HTTP_CONNECT_TLS_AddressString_IPv4 = nullptr;
	#endif
	#endif
		HTTP_CONNECT_TargetDomain = nullptr;
		HTTP_CONNECT_HeaderField = nullptr;
		HTTP_CONNECT_ProxyAuthorization = nullptr;

	//Exit process.
		exit(EXIT_FAILURE);
//		return;
	}

//ConfigurationTable settings
	ConfigurationTableSetting(this);

//Copy constructor
	//[Base] block
	Version_Major = Reference.Version_Major;
	Version_Minor = Reference.Version_Minor;
	FileRefreshTime = Reference.FileRefreshTime;
	LargeBufferSize = Reference.LargeBufferSize;
	//[Log] block
	PrintLogLevel = Reference.PrintLogLevel;
	LogMaxSize = Reference.LogMaxSize;
	//[Listen] block
	IsProcessUnique = Reference.IsProcessUnique;
#if defined(ENABLE_PCAP)
	IsPcapCapture = Reference.IsPcapCapture;
	if (Reference.PcapDevicesBlacklist != nullptr)
	{
		*PcapDevicesBlacklist = *Reference.PcapDevicesBlacklist;
	}
	else {
		delete PcapDevicesBlacklist;
		PcapDevicesBlacklist = nullptr;
	}
	PcapReadingTimeout = Reference.PcapReadingTimeout;
#endif
	OperationMode = Reference.OperationMode;
	ListenProtocol_Network = Reference.ListenProtocol_Network;
	ListenProtocol_Transport = Reference.ListenProtocol_Transport;
	if (Reference.ListenPort != nullptr)
	{
		*ListenPort = *Reference.ListenPort;
	}
	else {
		delete ListenPort;
		ListenPort = nullptr;
	}
	IsIPFilterTypePermit = Reference.IsIPFilterTypePermit;
	IPFilterLevel = Reference.IPFilterLevel;
	IsAcceptTypePermit = Reference.IsAcceptTypePermit;
	if (Reference.AcceptTypeList != nullptr)
	{
		*AcceptTypeList = *Reference.AcceptTypeList;
	}
	else {
		delete AcceptTypeList;
		AcceptTypeList = nullptr;
	}

	//[DNS] block
	RequestMode_Network = Reference.RequestMode_Network;
	RequestMode_Transport = Reference.RequestMode_Transport;
	DirectRequest = Reference.DirectRequest;
	DNS_CacheType = Reference.DNS_CacheType;
	DNS_CacheParameter = Reference.DNS_CacheParameter;
	DNS_CacheSinglePrefix_IPv6 = Reference.DNS_CacheSinglePrefix_IPv6;
	DNS_CacheSinglePrefix_IPv4 = Reference.DNS_CacheSinglePrefix_IPv4;
	HostsDefaultTTL = Reference.HostsDefaultTTL;

	//[Local DNS] block
	LocalProtocol_Network = Reference.LocalProtocol_Network;
	LocalProtocol_Transport = Reference.LocalProtocol_Transport;
	IsLocalHosts = Reference.IsLocalHosts;
	IsLocalRouting = Reference.IsLocalRouting;
	IsLocalForce = Reference.IsLocalForce;

	//[Addresses] block
	if (Reference.ListenAddress_IPv6 != nullptr)
	{
		*ListenAddress_IPv6 = *Reference.ListenAddress_IPv6;
	}
	else {
		delete ListenAddress_IPv6;
		ListenAddress_IPv6 = nullptr;
	}
	if (Reference.ListenAddress_IPv4 != nullptr)
	{
		*ListenAddress_IPv4 = *Reference.ListenAddress_IPv4;
	}
	else {
		delete ListenAddress_IPv4;
		ListenAddress_IPv4 = nullptr;
	}
	if (Reference.LocalMachineSubnet_IPv6 != nullptr)
	{
		*LocalMachineSubnet_IPv6 = *Reference.LocalMachineSubnet_IPv6;
	}
	else {
		delete LocalMachineSubnet_IPv6;
		LocalMachineSubnet_IPv6 = nullptr;
	}
	if (Reference.LocalMachineSubnet_IPv4 != nullptr)
	{
		*LocalMachineSubnet_IPv4 = *Reference.LocalMachineSubnet_IPv4;
	}
	else {
		delete LocalMachineSubnet_IPv4;
		LocalMachineSubnet_IPv4 = nullptr;
	}
	Target_Server_Main_IPv6 = Reference.Target_Server_Main_IPv6;
	Target_Server_Alternate_IPv6 = Reference.Target_Server_Alternate_IPv6;
	Target_Server_Main_IPv4 = Reference.Target_Server_Main_IPv4;
	Target_Server_Alternate_IPv4 = Reference.Target_Server_Alternate_IPv4;
	Target_Server_Local_Main_IPv6 = Reference.Target_Server_Local_Main_IPv6;
	Target_Server_Local_Alternate_IPv6 = Reference.Target_Server_Local_Alternate_IPv6;
	Target_Server_Local_Main_IPv4 = Reference.Target_Server_Local_Main_IPv4;
	Target_Server_Local_Alternate_IPv4 = Reference.Target_Server_Local_Alternate_IPv4;
	if (Reference.Target_Server_IPv6_Multiple != nullptr)
	{
		*Target_Server_IPv6_Multiple = *Reference.Target_Server_IPv6_Multiple;
	}
	else {
		delete Target_Server_IPv6_Multiple;
		Target_Server_IPv6_Multiple = nullptr;
	}
	if (Reference.Target_Server_IPv4_Multiple != nullptr)
	{
		*Target_Server_IPv4_Multiple = *Reference.Target_Server_IPv4_Multiple;
	}
	else {
		delete Target_Server_IPv4_Multiple;
		Target_Server_IPv4_Multiple = nullptr;
	}

	//[Values] block
	ThreadPoolBaseNum = Reference.ThreadPoolBaseNum;
	ThreadPoolMaxNum = Reference.ThreadPoolMaxNum;
	ThreadPoolResetTime = Reference.ThreadPoolResetTime;
	QueueResetTime = Reference.QueueResetTime;
	EDNS_PayloadSize = Reference.EDNS_PayloadSize;
	PacketHopLimits_IPv6_Begin = Reference.PacketHopLimits_IPv6_Begin;
	PacketHopLimits_IPv6_End = Reference.PacketHopLimits_IPv6_End;
	PacketHopLimits_IPv4_Begin = Reference.PacketHopLimits_IPv4_Begin;
	PacketHopLimits_IPv4_End = Reference.PacketHopLimits_IPv4_End;
#if defined(ENABLE_PCAP)
	HopLimitsFluctuation = Reference.HopLimitsFluctuation;
#endif
	SocketTimeout_Reliable_Once = Reference.SocketTimeout_Reliable_Once;
	SocketTimeout_Reliable_Serial = Reference.SocketTimeout_Reliable_Serial;
	SocketTimeout_Unreliable_Once = Reference.SocketTimeout_Unreliable_Once;
	SocketTimeout_Unreliable_Serial = Reference.SocketTimeout_Unreliable_Serial;
	TCP_FastOpen = Reference.TCP_FastOpen;
	ReceiveWaiting = Reference.ReceiveWaiting;
	AlternateTimes = Reference.AlternateTimes;
	AlternateTimeRange = Reference.AlternateTimeRange;
	AlternateResetTime = Reference.AlternateResetTime;
	MultipleRequestTimes = Reference.MultipleRequestTimes;

	//[Switches] block
	DomainCaseConversion = Reference.DomainCaseConversion;
	CompressionPointerMutation = Reference.CompressionPointerMutation;
	CPM_PointerToHeader = Reference.CPM_PointerToHeader;
	CPM_PointerToRR = Reference.CPM_PointerToRR;
	CPM_PointerToAdditional = Reference.CPM_PointerToAdditional;
	EDNS_Label = Reference.EDNS_Label;
	EDNS_Switch_Local = Reference.EDNS_Switch_Local;
	EDNS_Switch_SOCKS = Reference.EDNS_Switch_SOCKS;
	EDNS_Switch_HTTP_CONNECT = Reference.EDNS_Switch_HTTP_CONNECT;
	EDNS_Switch_Direct = Reference.EDNS_Switch_Direct;
#if defined(ENABLE_LIBSODIUM)
	EDNS_Switch_DNSCurve = Reference.EDNS_Switch_DNSCurve;
#endif
	EDNS_Switch_TCP = Reference.EDNS_Switch_TCP;
	EDNS_Switch_UDP = Reference.EDNS_Switch_UDP;
	EDNS_ClientSubnet_Relay = Reference.EDNS_ClientSubnet_Relay;
	DNSSEC_Request = Reference.DNSSEC_Request;
	DNSSEC_Validation = Reference.DNSSEC_Validation;
	DNSSEC_ForceValidation = Reference.DNSSEC_ForceValidation;
	AlternateMultipleRequest = Reference.AlternateMultipleRequest;
	DoNotFragment = Reference.DoNotFragment;
#if defined(ENABLE_PCAP)
	HeaderCheck_IPv4 = Reference.HeaderCheck_IPv4;
	HeaderCheck_TCP = Reference.HeaderCheck_TCP;
#endif
	HeaderCheck_DNS = Reference.HeaderCheck_DNS;
	DataCheck_Blacklist = Reference.DataCheck_Blacklist;
	DataCheck_Strict_RR_TTL = Reference.DataCheck_Strict_RR_TTL;

	//[Data] block
#if defined(ENABLE_PCAP)
	ICMP_ID = Reference.ICMP_ID;
	ICMP_Sequence = Reference.ICMP_Sequence;
	ICMP_Speed = Reference.ICMP_Speed;
	if (Reference.ICMP_PaddingData != nullptr)
	{
		memcpy_s(ICMP_PaddingData, ICMP_PADDING_MAXSIZE, Reference.ICMP_PaddingData, ICMP_PADDING_MAXSIZE);
	}
	else {
		delete[] ICMP_PaddingData;
		ICMP_PaddingData = nullptr;
	}
	ICMP_PaddingLength = Reference.ICMP_PaddingLength;
	DomainTest_Protocol = Reference.DomainTest_Protocol;
	DomainTest_ID = Reference.DomainTest_ID;
	DomainTest_Speed = Reference.DomainTest_Speed;
	if (Reference.DomainTest_Data != nullptr)
	{
		memcpy_s(DomainTest_Data, DOMAIN_MAXSIZE, Reference.DomainTest_Data, DOMAIN_MAXSIZE);
	}
	else {
		delete[] DomainTest_Data;
		DomainTest_Data = nullptr;
	}
#endif
	if (Reference.Local_FQDN_String != nullptr)
	{
		*Local_FQDN_String = *Reference.Local_FQDN_String;
	}
	else {
		delete Local_FQDN_String;
		Local_FQDN_String = nullptr;
	}
	memcpy_s(Local_FQDN_Response, DOMAIN_MAXSIZE, Reference.Local_FQDN_Response, DOMAIN_MAXSIZE);
	Local_FQDN_Length = Reference.Local_FQDN_Length;
#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
	memcpy_s(LocalServer_Response, DOMAIN_MAXSIZE + sizeof(dns_record_ptr) + sizeof(dns_record_opt), Reference.LocalServer_Response, DOMAIN_MAXSIZE + sizeof(dns_record_ptr) + sizeof(dns_record_opt));
	LocalServer_Length = Reference.LocalServer_Length;
#endif

	//[Proxy] block
	SOCKS_Proxy = Reference.SOCKS_Proxy;
	SOCKS_Version = Reference.SOCKS_Version;
	SOCKS_Protocol_Network = Reference.SOCKS_Protocol_Network;
	SOCKS_Protocol_Transport = Reference.SOCKS_Protocol_Transport;
	SOCKS_UDP_NoHandshake = Reference.SOCKS_UDP_NoHandshake;
	SOCKS_Only = Reference.SOCKS_Only;
	SOCKS_Address_IPv6 = Reference.SOCKS_Address_IPv6;
	SOCKS_Address_IPv4 = Reference.SOCKS_Address_IPv4;
	SOCKS_TargetServer = Reference.SOCKS_TargetServer;
	if (Reference.SOCKS_TargetDomain != nullptr)
	{
		*SOCKS_TargetDomain = *Reference.SOCKS_TargetDomain;
	}
	else {
		delete SOCKS_TargetDomain;
		SOCKS_TargetDomain = nullptr;
	}
	SOCKS_TargetDomain_Port = Reference.SOCKS_TargetDomain_Port;
	if (Reference.SOCKS_Username != nullptr)
	{
		*SOCKS_Username = *Reference.SOCKS_Username;
	}
	else {
		delete SOCKS_Username;
		SOCKS_Username = nullptr;
	}
	if (Reference.SOCKS_Password != nullptr)
	{
		*SOCKS_Password = *Reference.SOCKS_Password;
	}
	else {
		delete SOCKS_Password;
		SOCKS_Password = nullptr;
	}
	HTTP_CONNECT_Proxy = Reference.HTTP_CONNECT_Proxy;
	HTTP_CONNECT_Protocol = Reference.HTTP_CONNECT_Protocol;
	HTTP_CONNECT_Only = Reference.HTTP_CONNECT_Only;
	HTTP_CONNECT_Address_IPv6 = Reference.HTTP_CONNECT_Address_IPv6;
	HTTP_CONNECT_Address_IPv4 = Reference.HTTP_CONNECT_Address_IPv4;
#if defined(ENABLE_TLS)
	HTTP_CONNECT_TLS_Handshake = Reference.HTTP_CONNECT_TLS_Handshake;
	HTTP_CONNECT_TLS_Version = Reference.HTTP_CONNECT_TLS_Version;
	HTTP_CONNECT_TLS_Validation = Reference.HTTP_CONNECT_TLS_Validation;
	if (Reference.HTTP_CONNECT_TLS_SNI != nullptr)
	{
		*HTTP_CONNECT_TLS_SNI = *Reference.HTTP_CONNECT_TLS_SNI;
	}
	else {
		delete HTTP_CONNECT_TLS_SNI;
		HTTP_CONNECT_TLS_SNI = nullptr;
	}
	if (Reference.MBS_HTTP_CONNECT_TLS_SNI != nullptr)
	{
		*MBS_HTTP_CONNECT_TLS_SNI = *Reference.MBS_HTTP_CONNECT_TLS_SNI;
	}
	else {
		delete MBS_HTTP_CONNECT_TLS_SNI;
		MBS_HTTP_CONNECT_TLS_SNI = nullptr;
	}
#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
	if (Reference.HTTP_CONNECT_TLS_AddressString_IPv6 != nullptr)
	{
		*HTTP_CONNECT_TLS_AddressString_IPv6 = *Reference.HTTP_CONNECT_TLS_AddressString_IPv6;
	}
	else {
		delete HTTP_CONNECT_TLS_AddressString_IPv6;
		HTTP_CONNECT_TLS_AddressString_IPv6 = nullptr;
	}
	if (Reference.HTTP_CONNECT_TLS_AddressString_IPv4 != nullptr)
	{
		*HTTP_CONNECT_TLS_AddressString_IPv4 = *Reference.HTTP_CONNECT_TLS_AddressString_IPv4;
	}
	else {
		delete HTTP_CONNECT_TLS_AddressString_IPv4;
		HTTP_CONNECT_TLS_AddressString_IPv4 = nullptr;
	}
#endif
#if !defined(PLATFORM_WIN_XP)
	HTTP_CONNECT_TLS_ALPN = Reference.HTTP_CONNECT_TLS_ALPN;
#endif
#endif
	if (Reference.HTTP_CONNECT_TargetDomain != nullptr)
	{
		*HTTP_CONNECT_TargetDomain = *Reference.HTTP_CONNECT_TargetDomain;
	}
	else {
		delete HTTP_CONNECT_TargetDomain;
		HTTP_CONNECT_TargetDomain = nullptr;
	}
	HTTP_CONNECT_Version = Reference.HTTP_CONNECT_Version;
	if (Reference.HTTP_CONNECT_HeaderField != nullptr)
	{
		*HTTP_CONNECT_HeaderField = *Reference.HTTP_CONNECT_HeaderField;
	}
	else {
		delete HTTP_CONNECT_HeaderField;
		HTTP_CONNECT_HeaderField = nullptr;
	}
	if (Reference.HTTP_CONNECT_ProxyAuthorization != nullptr)
	{
		*HTTP_CONNECT_ProxyAuthorization = *Reference.HTTP_CONNECT_ProxyAuthorization;
	}
	else {
		delete HTTP_CONNECT_ProxyAuthorization;
		HTTP_CONNECT_ProxyAuthorization = nullptr;
	}

	//[DNSCurve] block
#if defined(ENABLE_LIBSODIUM)
	IsDNSCurve = Reference.IsDNSCurve;
#endif

	return;
!!!134796.cpp!!!	SetToMonitorItem(in  : void) : void
//[Listen] block
#if defined(ENABLE_PCAP)
	delete PcapDevicesBlacklist;
	PcapDevicesBlacklist = nullptr;
#endif
	delete ListenPort;
	ListenPort = nullptr;

//[Addresses] block
	delete ListenAddress_IPv6;
	delete ListenAddress_IPv4;
	delete LocalMachineSubnet_IPv6;
	delete LocalMachineSubnet_IPv4;
	delete Target_Server_IPv6_Multiple;
	delete Target_Server_IPv4_Multiple;
	ListenAddress_IPv6 = nullptr;
	ListenAddress_IPv4 = nullptr;
	LocalMachineSubnet_IPv6 = nullptr;
	LocalMachineSubnet_IPv4 = nullptr;
	Target_Server_IPv6_Multiple = nullptr;
	Target_Server_IPv4_Multiple = nullptr;

//[Data] block
#if defined(ENABLE_PCAP)
	delete[] ICMP_PaddingData;
	delete[] DomainTest_Data;
	ICMP_PaddingData = nullptr;
	DomainTest_Data = nullptr;
#endif
	delete Local_FQDN_String;
	delete[] Local_FQDN_Response;
	Local_FQDN_String = nullptr;
	Local_FQDN_Response = nullptr;
#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
	delete[] LocalServer_Response;
	LocalServer_Response = nullptr;
#endif

	return;
!!!134924.cpp!!!	MonitorItemToUsing(inout ConfigurationParameter : ConfigurationTable) : void
//[Base] block
	ConfigurationParameter->Version_Major = Version_Major;
	ConfigurationParameter->Version_Minor = Version_Minor;
	ConfigurationParameter->FileRefreshTime = FileRefreshTime;

//[Log] block
	ConfigurationParameter->PrintLogLevel = PrintLogLevel;
	ConfigurationParameter->LogMaxSize = LogMaxSize;

//[Listen] block
	ConfigurationParameter->IsIPFilterTypePermit = IsIPFilterTypePermit;
	ConfigurationParameter->IPFilterLevel = IPFilterLevel;
	ConfigurationParameter->IsAcceptTypePermit = IsAcceptTypePermit;
	ConfigurationParameter->AcceptTypeList->swap(*AcceptTypeList);

//[DNS] block
	ConfigurationParameter->DirectRequest = DirectRequest;
	ConfigurationParameter->HostsDefaultTTL = HostsDefaultTTL;

//[Local DNS] block
	ConfigurationParameter->LocalProtocol_Network = LocalProtocol_Network;
	ConfigurationParameter->LocalProtocol_Transport = LocalProtocol_Transport;

//[Values] block
	ConfigurationParameter->ThreadPoolResetTime = ThreadPoolResetTime;
#if defined(ENABLE_PCAP)
	ConfigurationParameter->Target_Server_Main_IPv6.HopLimitsData_Assign.HopLimit = Target_Server_Main_IPv6.HopLimitsData_Assign.HopLimit;
	ConfigurationParameter->Target_Server_Main_IPv4.HopLimitsData_Assign.TTL = Target_Server_Main_IPv4.HopLimitsData_Assign.TTL;
	ConfigurationParameter->Target_Server_Main_IPv6.HopLimitsData_Mark.HopLimit = Target_Server_Main_IPv6.HopLimitsData_Mark.HopLimit;
	ConfigurationParameter->Target_Server_Main_IPv4.HopLimitsData_Mark.TTL = Target_Server_Main_IPv4.HopLimitsData_Mark.TTL;
	ConfigurationParameter->Target_Server_Alternate_IPv6.HopLimitsData_Assign.HopLimit = Target_Server_Alternate_IPv6.HopLimitsData_Assign.HopLimit;
	ConfigurationParameter->Target_Server_Alternate_IPv4.HopLimitsData_Assign.TTL = Target_Server_Alternate_IPv4.HopLimitsData_Assign.TTL;
	ConfigurationParameter->Target_Server_Alternate_IPv6.HopLimitsData_Mark.HopLimit = Target_Server_Alternate_IPv6.HopLimitsData_Mark.HopLimit;
	ConfigurationParameter->Target_Server_Alternate_IPv4.HopLimitsData_Mark.TTL = Target_Server_Alternate_IPv4.HopLimitsData_Mark.TTL;
#endif
	ConfigurationParameter->SocketTimeout_Reliable_Once = SocketTimeout_Reliable_Once;
	ConfigurationParameter->SocketTimeout_Reliable_Serial = SocketTimeout_Reliable_Serial;
	ConfigurationParameter->SocketTimeout_Unreliable_Once = SocketTimeout_Unreliable_Once;
	ConfigurationParameter->SocketTimeout_Unreliable_Serial = SocketTimeout_Unreliable_Serial;
	ConfigurationParameter->ReceiveWaiting = ReceiveWaiting;
#if defined(ENABLE_PCAP)
	ConfigurationParameter->ICMP_Speed = ICMP_Speed;
	ConfigurationParameter->DomainTest_Protocol = DomainTest_Protocol;
	ConfigurationParameter->DomainTest_Speed = DomainTest_Speed;
#endif
	ConfigurationParameter->MultipleRequestTimes = MultipleRequestTimes;

//[Switches] block
	ConfigurationParameter->DomainCaseConversion = DomainCaseConversion;
#if defined(ENABLE_PCAP)
	ConfigurationParameter->HeaderCheck_IPv4 = HeaderCheck_IPv4;
	ConfigurationParameter->HeaderCheck_TCP = HeaderCheck_TCP;
#endif
	ConfigurationParameter->HeaderCheck_DNS = HeaderCheck_DNS;
	ConfigurationParameter->DataCheck_Strict_RR_TTL = DataCheck_Strict_RR_TTL;

//[Proxy] block
	if (ConfigurationParameter->SOCKS_TargetDomain != nullptr && !SOCKS_TargetDomain->empty() && SOCKS_TargetDomain_Port > 0)
	{
	//Reset old items.
		memset(&ConfigurationParameter->SOCKS_TargetServer, 0, sizeof(ConfigurationParameter->SOCKS_TargetServer));

	//Copy new items.
		*ConfigurationParameter->SOCKS_TargetDomain = *SOCKS_TargetDomain;
		ConfigurationParameter->SOCKS_TargetDomain_Port = SOCKS_TargetDomain_Port;
	}
	else if (SOCKS_TargetServer.Storage.ss_family != 0)
	{
	//Reset old items.
		if (ConfigurationParameter->SOCKS_TargetDomain != nullptr)
			ConfigurationParameter->SOCKS_TargetDomain->clear();
		ConfigurationParameter->SOCKS_TargetDomain_Port = 0;

	//Copy new items.
		memcpy_s(&ConfigurationParameter->SOCKS_TargetServer, sizeof(ConfigurationParameter->SOCKS_TargetServer), &SOCKS_TargetServer, sizeof(ConfigurationParameter->SOCKS_TargetServer));
	}
	if (ConfigurationParameter->SOCKS_Username != nullptr)
	{
		if (!SOCKS_Username->empty())
			*ConfigurationParameter->SOCKS_Username = *SOCKS_Username;
		else 
			ConfigurationParameter->SOCKS_Username->clear();
	}
	if (ConfigurationParameter->SOCKS_Password != nullptr)
	{
		if (!SOCKS_Password->empty())
			*ConfigurationParameter->SOCKS_Password = *SOCKS_Password;
		else 
			ConfigurationParameter->SOCKS_Password->clear();
	}
	if (ConfigurationParameter->HTTP_CONNECT_TargetDomain != nullptr && !HTTP_CONNECT_TargetDomain->empty())
		*ConfigurationParameter->HTTP_CONNECT_TargetDomain = *HTTP_CONNECT_TargetDomain;
#if defined(ENABLE_TLS)
	ConfigurationParameter->HTTP_CONNECT_TLS_Version = HTTP_CONNECT_TLS_Version;
	ConfigurationParameter->HTTP_CONNECT_TLS_Validation = HTTP_CONNECT_TLS_Validation;
#endif
	if (ConfigurationParameter->HTTP_CONNECT_HeaderField != nullptr)
	{
		if (!HTTP_CONNECT_HeaderField->empty())
			*ConfigurationParameter->HTTP_CONNECT_HeaderField = *HTTP_CONNECT_HeaderField;
		else 
			ConfigurationParameter->HTTP_CONNECT_HeaderField->clear();
	}
	if (ConfigurationParameter->HTTP_CONNECT_ProxyAuthorization != nullptr)
	{
		if (!HTTP_CONNECT_ProxyAuthorization->empty())
			*ConfigurationParameter->HTTP_CONNECT_ProxyAuthorization = *HTTP_CONNECT_ProxyAuthorization;
		else 
			ConfigurationParameter->HTTP_CONNECT_ProxyAuthorization->clear();
	}

	return;
!!!135052.cpp!!!	MonitorItemReset(in  : void) : void
//[Base] block
	Version_Major = 0;
	Version_Minor = 0;
	FileRefreshTime = DEFAULT_FILE_REFRESH_TIME;

//[Log] block
	PrintLogLevel = DEFAULT_LOG_LEVEL;
	LogMaxSize = LOG_READING_MAXSIZE;

//[Listen] block
	IsIPFilterTypePermit = false;
	IPFilterLevel = 0;
	IsAcceptTypePermit = false;
	AcceptTypeList->clear();
	AcceptTypeList->shrink_to_fit();

//[DNS] block
	DirectRequest = REQUEST_MODE_DIRECT::NONE;
	HostsDefaultTTL = DEFAULT_HOSTS_TTL;

//[Local DNS] block
	LocalProtocol_Network = REQUEST_MODE_NETWORK::BOTH;
	LocalProtocol_Transport = REQUEST_MODE_TRANSPORT::UDP;

//[Values] block
	ThreadPoolResetTime = DEFAULT_THREAD_POOL_RESET_TIME;
#if defined(ENABLE_PCAP)
	Target_Server_Main_IPv6.HopLimitsData_Assign.HopLimit = 0;
	Target_Server_Main_IPv4.HopLimitsData_Assign.TTL = 0;
	Target_Server_Main_IPv6.HopLimitsData_Mark.HopLimit = 0;
	Target_Server_Main_IPv4.HopLimitsData_Mark.TTL = 0;
	Target_Server_Alternate_IPv6.HopLimitsData_Assign.HopLimit = 0;
	Target_Server_Alternate_IPv4.HopLimitsData_Assign.TTL = 0;
	Target_Server_Alternate_IPv6.HopLimitsData_Mark.HopLimit = 0;
	Target_Server_Alternate_IPv4.HopLimitsData_Mark.TTL = 0;
#endif
#if defined(PLATFORM_WIN)
	SocketTimeout_Reliable_Once = DEFAULT_RELIABLE_ONCE_SOCKET_TIMEOUT;
	SocketTimeout_Reliable_Serial = DEFAULT_RELIABLE_SERIAL_SOCKET_TIMEOUT;
	SocketTimeout_Unreliable_Once = DEFAULT_UNRELIABLE_ONCE_SOCKET_TIMEOUT;
	SocketTimeout_Unreliable_Serial = DEFAULT_UNRELIABLE_SERIAL_SOCKET_TIMEOUT;
#elif (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
	SocketTimeout_Reliable_Once.tv_sec = DEFAULT_RELIABLE_ONCE_SOCKET_TIMEOUT / SECOND_TO_MILLISECOND;
	SocketTimeout_Reliable_Once.tv_usec = DEFAULT_RELIABLE_ONCE_SOCKET_TIMEOUT % SECOND_TO_MILLISECOND * MICROSECOND_TO_MILLISECOND;
	SocketTimeout_Reliable_Serial.tv_sec = DEFAULT_RELIABLE_SERIAL_SOCKET_TIMEOUT / SECOND_TO_MILLISECOND;
	SocketTimeout_Reliable_Serial.tv_usec = DEFAULT_RELIABLE_SERIAL_SOCKET_TIMEOUT % SECOND_TO_MILLISECOND * MICROSECOND_TO_MILLISECOND;
	SocketTimeout_Unreliable_Once.tv_sec = DEFAULT_UNRELIABLE_ONCE_SOCKET_TIMEOUT / SECOND_TO_MILLISECOND;
	SocketTimeout_Unreliable_Once.tv_usec = DEFAULT_UNRELIABLE_ONCE_SOCKET_TIMEOUT % SECOND_TO_MILLISECOND * MICROSECOND_TO_MILLISECOND;
	SocketTimeout_Unreliable_Serial.tv_sec = DEFAULT_UNRELIABLE_SERIAL_SOCKET_TIMEOUT / SECOND_TO_MILLISECOND;
	SocketTimeout_Unreliable_Serial.tv_usec = DEFAULT_RELIABLE_SERIAL_SOCKET_TIMEOUT % SECOND_TO_MILLISECOND * MICROSECOND_TO_MILLISECOND;
#endif
	ReceiveWaiting = 0;
#if defined(ENABLE_PCAP)
	ICMP_Speed = DEFAULT_ICMP_TEST_TIME * SECOND_TO_MILLISECOND;
	DomainTest_Protocol = REQUEST_MODE_TEST::UDP;
	DomainTest_Speed = DEFAULT_DOMAIN_TEST_INTERVAL_TIME * SECOND_TO_MILLISECOND;
#endif
	MultipleRequestTimes = 0;

//[Switches] block
	DomainCaseConversion = false;
#if defined(ENABLE_PCAP)
	HeaderCheck_IPv4 = false;
	HeaderCheck_TCP = false;
#endif
	HeaderCheck_DNS = false;
	DataCheck_Strict_RR_TTL = false;

//[Proxy] block
	memset(&SOCKS_TargetServer, 0, sizeof(SOCKS_TargetServer));
	if (SOCKS_TargetDomain != nullptr)
		SOCKS_TargetDomain->clear();
	SOCKS_TargetDomain_Port = 0;
	if (SOCKS_Username != nullptr)
		SOCKS_Username->clear();
	if (SOCKS_Password != nullptr)
		SOCKS_Password->clear();
	if (HTTP_CONNECT_TargetDomain != nullptr)
		HTTP_CONNECT_TargetDomain->clear();
#if defined(ENABLE_TLS)
	HTTP_CONNECT_TLS_Version = TLS_VERSION_SELECTION::VERSION_AUTO;
	HTTP_CONNECT_TLS_Validation = false;
#endif
	if (HTTP_CONNECT_HeaderField != nullptr)
		HTTP_CONNECT_HeaderField->clear();
	if (HTTP_CONNECT_ProxyAuthorization != nullptr)
		HTTP_CONNECT_ProxyAuthorization->clear();

	return;
!!!135180.cpp!!!	~ConfigurationTable(in  : void)
//[Listen] block
#if defined(ENABLE_PCAP)
	delete PcapDevicesBlacklist;
	PcapDevicesBlacklist = nullptr;
#endif
	delete ListenPort;
	delete AcceptTypeList;
	ListenPort = nullptr;
	AcceptTypeList = nullptr;

//[Addresses] block
	delete ListenAddress_IPv6;
	delete ListenAddress_IPv4;
	delete LocalMachineSubnet_IPv6;
	delete LocalMachineSubnet_IPv4;
	delete Target_Server_IPv6_Multiple;
	delete Target_Server_IPv4_Multiple;
	ListenAddress_IPv6 = nullptr;
	ListenAddress_IPv4 = nullptr;
	LocalMachineSubnet_IPv6 = nullptr;
	LocalMachineSubnet_IPv4 = nullptr;
	Target_Server_IPv6_Multiple = nullptr;
	Target_Server_IPv4_Multiple = nullptr;

//[Data] block
#if defined(ENABLE_PCAP)
	delete[] ICMP_PaddingData;
	delete[] DomainTest_Data;
	ICMP_PaddingData = nullptr;
	DomainTest_Data = nullptr;
#endif
	delete Local_FQDN_String;
	delete[] Local_FQDN_Response;
	Local_FQDN_String = nullptr;
	Local_FQDN_Response = nullptr;
#if (defined(PLATFORM_WIN) || defined(PLATFORM_LINUX))
	delete[] LocalServer_Response;
	LocalServer_Response = nullptr;
#endif

//[Proxy] block
	delete SOCKS_TargetDomain;
	delete SOCKS_Username;
	delete SOCKS_Password;
#if defined(ENABLE_TLS)
	delete HTTP_CONNECT_TLS_SNI;
	delete MBS_HTTP_CONNECT_TLS_SNI;
#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
	delete HTTP_CONNECT_TLS_AddressString_IPv6;
	delete HTTP_CONNECT_TLS_AddressString_IPv4;
#endif
#endif
	delete HTTP_CONNECT_TargetDomain;
	delete HTTP_CONNECT_HeaderField;
	delete HTTP_CONNECT_ProxyAuthorization;
	SOCKS_TargetDomain = nullptr;
	SOCKS_Username = nullptr;
	SOCKS_Password = nullptr;
#if defined(ENABLE_TLS)
	HTTP_CONNECT_TLS_SNI = nullptr;
	MBS_HTTP_CONNECT_TLS_SNI = nullptr;
#if (defined(PLATFORM_LINUX) || defined(PLATFORM_MACOS))
	HTTP_CONNECT_TLS_AddressString_IPv6 = nullptr;
	HTTP_CONNECT_TLS_AddressString_IPv4 = nullptr;
#endif
#endif
	HTTP_CONNECT_TargetDomain = nullptr;
	HTTP_CONNECT_HeaderField = nullptr;
	HTTP_CONNECT_ProxyAuthorization = nullptr;

	return;
